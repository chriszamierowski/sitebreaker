/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */@import url(https://fonts.googleapis.com/css?family=Raleway);html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-appearance:textfield;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}.sitebreaker-block{border:1px solid #53b6b5!important;transition:all 1s ease-in-out}:not([class^=sitebreaker]):not(area):not(base):not(br):not(col):not(command):not(embed):not(hr):not(img):not(input):not(keygen):not(link):not(meta):not(param):not(source):not(track):not(wbr):empty{display:none!important}.sitebreaker-stage :empty{display:inherit!important}.sitebreaker-scoreboard{position:absolute!important;top:15px!important;left:15px!important}.sitebreaker-scoreboard img{width:40px!important;height:40px!important;position:absolute!important;top:-6.5px!important;left:-9px!important}.sitebreaker-scoreboard div{border-radius:6px!important;position:relative!important;height:30px!important;padding:4px 5px 0 40px!important;margin-bottom:20px!important;box-sizing:border-box!important;font-size:20px!important;line-height:20px!important;background-color:hsla(0,0%,60%,.8)!important;border-width:0 0 3px!important;border-style:solid!important;border-color:#666!important;text-align:right!important;color:#f0f0f0!important;box-shadow:0 0 0 1px rgba(30,30,30,.8)!important}.sitebreaker-scoreboard div i{color:#ddd!important;margin-right:3px!important;font-style:normal!important}.sitebreaker-scoreboard div span{color:#f0f0f0!important;transition:color .2s ease-out!important}.sitebreaker-scoreboard div span.sitebreaker-blocks.sitebreaker-updating,.sitebreaker-scoreboard div span.sitebreaker-score.sitebreaker-updating{color:lime!important}.sitebreaker-scoreboard div span.sitebreaker-balls.sitebreaker-updating{color:red!important}.sitebreaker-dialog{position:absolute!important;top:0!important;right:0!important;bottom:0!important;left:0!important;display:-webkit-flex!important;display:-ms-flexbox!important;display:flex!important;-webkit-justify-content:center!important;-ms-flex-pack:center!important;justify-content:center!important;-webkit-align-items:center!important;-ms-flex-align:center!important;align-items:center!important;text-align:center!important}.sitebreaker-dialog>div{padding:30px!important;border-radius:5px!important;background-color:#989898!important;border-bottom:3px solid #666!important;box-shadow:0 0 0 1px rgba(30,30,30,.8)!important}.sitebreaker-dialog:empty{display:none!important}.sitebreaker-stage{position:fixed!important;top:0!important;left:0!important;right:0!important;bottom:0!important;height:100%!important;width:100%!important;z-index:9999!important;font-family:Raleway,sans-serif!important}.sitebreaker-hidden{visibility:hidden!important}.sitebreaker-stage button{-webkit-appearance:none!important;-moz-appearance:none!important;appearance:none!important;background-color:#53b6b5!important;border:0!important;border-radius:3px!important;color:#fff!important;cursor:pointer!important;display:inline-block!important;-webkit-font-smoothing:antialiased!important;line-height:1!important;padding:1em 2em!important;text-decoration:none!important;transition:all .08s ease-in!important;-webkit-user-select:none!important;-moz-user-select:none!important;-ms-user-select:none!important;user-select:none!important;vertical-align:middle!important;white-space:nowrap!important;box-shadow:0 .5em 0 #4f8483!important;outline:none!important;position:relative!important;top:0!important;background-image:radial-gradient(ellipse at 4% 5%,#53b6b5 0,#53b6b5 69%,#50a0a0 70%)!important;margin-top:1em!important}.sitebreaker-stage button:active{box-shadow:0 0 0 #4f8483!important;top:.5em!important;background-image:radial-gradient(ellipse at 4% 5%,#50a0a0 0,#50a0a0 86%)!important}.sitebreaker-stage button img{width:50%!important}
/*# sourceMappingURL=data:application/json;base64, */
